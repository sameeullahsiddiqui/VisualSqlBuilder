@namespace VisualSqlBuilder.Core.Components

@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using global::VisualSqlBuilder.Core.Models
@using global::VisualSqlBuilder.Core.Services

@inject IJSRuntime JSRuntime
@inject ISchemaService SchemaService
@inject ISqlGeneratorService SqlGenerator
@inject IAzureOpenAIService OpenAIService

<div class="visual-sql-builder">
    <div class="toolbar">
        <div class="btn-group" role="group">
            <button class="btn btn-primary" @onclick="ShowConnectionDialog">
                <i class="bi bi-database"></i> Connect Database
            </button>
            <InputFile id="excelFileInput" style="display:none" OnChange="HandleExcelSelected" />

            <button class="btn btn-success" @onclick="ShowExcelUpload">
                <i class="bi bi-file-earmark-excel"></i> Upload Excel
            </button>
            <button class="btn btn-info" @onclick="AddNewTable">
                <i class="bi bi-table"></i> Add Table
            </button>
            <button class="btn btn-warning" @onclick="SaveLayout">
                <i class="bi bi-save"></i> Save Layout
            </button>
            <button class="btn btn-secondary" @onclick="LoadLayout">
                <i class="bi bi-folder-open"></i> Load Layout
            </button>
        </div>

        <div class="btn-group ms-3" role="group">
            <button class="btn btn-outline-primary" @onclick="ZoomIn">
                <i class="bi bi-zoom-in"></i>
            </button>
            <button class="btn btn-outline-primary" @onclick="ZoomOut">
                <i class="bi bi-zoom-out"></i>
            </button>
            <button class="btn btn-outline-primary" @onclick="ResetZoom">
                <i class="bi bi-arrows-fullscreen"></i>
            </button>
        </div>

        <div class="btn-group ms-3" role="group">
            <button class="btn btn-success" @onclick="GenerateAndExecuteQuery">
                <i class="bi bi-play-fill"></i> Execute Query
            </button>
        </div>
    </div>

    <div class="main-container">
        <div class="canvas-container" @ref="canvasElement" id="sql-canvas">

            <!-- SVG for relationship lines -->
            <svg class="relationship-layer" xmlns="http://www.w3.org/2000/svg">

                @foreach (var relationship in _queryModel.Relationships)
                {
                    var sourceTable = _queryModel.Tables.FirstOrDefault(t => t.Id == relationship.SourceTableId);
                    var targetTable = _queryModel.Tables.FirstOrDefault(t => t.Id == relationship.TargetTableId);

                    if (sourceTable != null && targetTable != null)
                    {
                        var sourceCol = sourceTable.Columns.FirstOrDefault(c => c.Id == relationship.SourceColumnId);
                        var targetCol = targetTable.Columns.FirstOrDefault(c => c.Id == relationship.TargetColumnId);

                        if (sourceCol != null && targetCol != null)
                        {
                            var color = relationship.Type == RelationshipType.Primary ? "red" : "blue";
                            var sourceY = sourceTable.Position.Y + 40 + (sourceTable.Columns.IndexOf(sourceCol) * 30);
                            var targetY = targetTable.Position.Y + 40 + (targetTable.Columns.IndexOf(targetCol) * 30);

                            <line class="relationship-line @(relationship.Type.ToString().ToLower())"
                                  x1="@(sourceTable.Position.X + sourceTable.Size.Width)" y1="@sourceY" x2="@targetTable.Position.X"
                                  y2="@targetY" stroke="@color" stroke-width="2" @onclick="() => EditRelationship(relationship)"
                                  data-relationship-id="@relationship.Id" />

                            <!-- Cardinality label -->
                            <svg:text class="cardinality-label"
                                  x="@((sourceTable.Position.X + targetTable.Position.X) / 2)"
                                  y="@((sourceY + targetY) / 2 - 5)">
                                @relationship.Cardinality
                            </svg:text>
                        }
                    }
                }
            </svg>

            <!-- Domains -->
            @foreach (var domain in _queryModel.Domains)
            {
                <div class="domain-container @(domain.IsCollapsed ? "collapsed" : "")" style="left: @(domain.Position.X)px; top: @(domain.Position.Y)px;
                                        width: @(domain.Size.Width)px; height: @(domain.Size.Height)px;
                                        background-color: @domain.Color;">
                    <div class="domain-header">
                        <span class="domain-name">@domain.Name</span>
                        <button class="btn btn-sm btn-link" @onclick="() => ToggleDomain(domain)">
                            <i class="bi bi-@(domain.IsCollapsed ? "chevron-down" : "chevron-up")"></i>
                        </button>
                    </div>
                </div>
            }

            <!-- Tables -->
            @foreach (var table in _queryModel.Tables)
            {
                <div class="table-card" data-table-id="@table.Id" style="left: @(table.Position.X)px; top: @(table.Position.Y)px;
                                        width: @(table.Size.Width)px; height: @(table.Size.Height)px;">
                    <div class="table-header">
                        <span class="table-name">@table.Name</span>
                        <span class="table-alias">(@table.Alias)</span>
                        <button class="btn btn-sm btn-link" @onclick="() => RemoveTable(table)">
                            <i class="bi bi-x"></i>
                        </button>
                    </div>
                    <div class="table-body">
                        @foreach (var column in table.Columns)
                        {
                            <div class="column-row">
                                <span class="column-connector left" data-column-id="@column.Id"
                                      data-table-id="@table.Id"></span>
                                <input type="checkbox" @bind="column.IsSelected" />
                                <span class="column-name">
                                    @if (column.IsPrimaryKey)
                                    {
                                        <i class="bi bi-key text-warning"></i>
                                    }
                                    @column.Name
                                </span>
                                <span class="column-type">@column.DataType</span>
                                @if (column.Filter != null)
                                {
                                    <i class="bi bi-funnel-fill text-info"></i>
                                }
                                <span class="column-connector right" data-column-id="@column.Id"
                                      data-table-id="@table.Id"></span>
                            </div>
                        }
                        <button class="btn btn-sm btn-link" @onclick="() => AddColumn(table)">
                            <i class="bi bi-plus"></i> Add Column
                        </button>
                    </div>
                </div>
            }
        </div>

        <div class="sidebar">
            <ul class="nav nav-tabs" role="tablist">
                <li class="nav-item">
                    <a class="nav-link active" data-bs-toggle="tab" href="#sql-preview">SQL</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" data-bs-toggle="tab" href="#properties">Properties</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" data-bs-toggle="tab" href="#validation">Validation</a>
                </li>
            </ul>

            <div class="tab-content">
                <div class="tab-pane fade show active" id="sql-preview">
                    <div class="sql-preview">
                        <pre><code>@_generatedSql</code></pre>
                    </div>
                </div>

                <div class="tab-pane fade" id="properties">
                    @if (_selectedTable != null)
                    {
                        <div class="properties-panel">
                            <h5>Table Properties</h5>
                            <div class="mb-3">
                                <label>Name:</label>
                                <input type="text" class="form-control" @bind="_selectedTable.Name" />
                            </div>
                            <div class="mb-3">
                                <label>Alias:</label>
                                <input type="text" class="form-control" @bind="_selectedTable.Alias" />
                            </div>
                            <div class="mb-3">
                                <label>Domain:</label>
                                <select class="form-control" @bind="_selectedTable.DomainId">
                                    <option value="">None</option>
                                    @foreach (var domain in _queryModel.Domains)
                                    {
                                        <option value="@domain.Id">@domain.Name</option>
                                    }
                                </select>
                            </div>
                        </div>
                    }
                </div>

                <div class="tab-pane fade" id="validation">
                    <div class="validation-panel">
                        <h5>Validation Rules</h5>
                        <button class="btn btn-sm btn-primary" @onclick="AddValidationRule">
                            <i class="bi bi-plus"></i> Add Rule
                        </button>
                        @foreach (var rule in _validationRules)
                        {
                            <div class="validation-rule">
                                <input type="text" @bind="rule.Name" placeholder="Rule name" />
                                <select @bind="rule.RuleType">
                                    <option value="SQL">SQL</option>
                                    <option value="CSharp">C#</option>
                                </select>
                                <textarea @bind="rule.Expression" placeholder="Expression"></textarea>
                                <button class="btn btn-sm btn-danger" @onclick="() => RemoveValidationRule(rule)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Query Results -->
    @if (_queryResults != null)
    {
        <div class="query-results">
            <h5>Query Results (@_queryResults.Rows.Count rows)</h5>
            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            @foreach (System.Data.DataColumn column in _queryResults.Columns)
                            {
                                <th>@column.ColumnName</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (System.Data.DataRow row in _queryResults.Rows)
                        {
                            <tr>
                                @foreach (var item in row.ItemArray)
                                {
                                    <td>@item?.ToString()</td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
</div>

<!-- Modals -->
<div class="modal fade" id="connectionModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Database Connection</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label>Connection String:</label>
                    <textarea class="form-control" @bind="ConnectionString" rows="3"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="ConnectToDatabase">Connect</button>
            </div>
        </div>
    </div>
</div>

@code {
    private QueryModel _queryModel = new();
    private string _generatedSql = "";
    private TableModel? _selectedTable;
    private List<ValidationRule> _validationRules = new();
    private System.Data.DataTable? _queryResults;
    private ElementReference canvasElement;
    private double _zoomLevel = 1.0;

    [Parameter]
    public string? ConnectionString { get; set; }

    [Parameter]
    public EventCallback<string> OnQueryGenerated { get; set; }

    protected override void OnInitialized()
    {
        Console.WriteLine("VisualSqlBuilder initialized");
        
        // Initialize with some default data for testing
        _validationRules = new List<ValidationRule>();
        _queryModel = new QueryModel();
        _generatedSql = "-- No query generated yet";
        
        // Log to both console and browser console
        _ = Task.Run(async () => 
        {
            await Task.Delay(100); // Small delay to ensure JSRuntime is available
            try 
            {
                await JSRuntime.InvokeVoidAsync("console.log", "VisualSqlBuilder component initialized successfully");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to log to browser console: {ex.Message}");
            }
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("VisualSqlBuilder: First render completed");
            await JSRuntime.InvokeVoidAsync("console.log", "VisualSqlBuilder: First render completed in browser");
            
            try
            {
                await InitializeCanvas();
                Console.WriteLine("Canvas initialization completed");
                await JSRuntime.InvokeVoidAsync("console.log", "Canvas initialization completed");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Canvas initialization failed: {ex.Message}");
                await JSRuntime.InvokeVoidAsync("console.error", $"Canvas initialization failed: {ex.Message}");
            }
        }
    }

    private async Task InitializeCanvas()
    {
        try
        {
            Console.WriteLine("Initializing canvas...");
            await JSRuntime.InvokeVoidAsync("console.log", "Attempting to initialize SQL canvas");
            
            // Check if the JavaScript function exists before calling it
            var functionExists = await JSRuntime.InvokeAsync<bool>("eval", 
                "typeof window.initializeSqlCanvas === 'function'");
            
            if (functionExists)
            {
                await JSRuntime.InvokeVoidAsync("initializeSqlCanvas", canvasElement);
                Console.WriteLine("Canvas initialized successfully");
            }
            else
            {
                Console.WriteLine("Warning: initializeSqlCanvas function not found in JavaScript");
                await JSRuntime.InvokeVoidAsync("console.warn", "initializeSqlCanvas function not found");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Canvas initialization error: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("console.error", $"Canvas initialization error: {ex.Message}");
        }
    }

    public async Task ShowConnectionDialog()
    {
        Console.WriteLine("Button clicked - inside ShowConnectionDialog()");
        await JSRuntime.InvokeVoidAsync("showModal", "connectionModal");
    }

    public async Task ShowExcelUpload()
    {
        await JSRuntime.InvokeVoidAsync("triggerClick", "excelFileInput");
    }

    private async Task HandleExcelSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var stream = file.OpenReadStream(maxAllowedSize: 10_000_000); // 10 MB limit
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);

            byte[] fileBytes = ms.ToArray();

            // TODO: parse Excel (use ClosedXML or EPPlus if Core supports it)
            Console.WriteLine($"Uploaded {file.Name} with {fileBytes.Length} bytes");
        }
    }

    public async Task ConnectToDatabase()
    {
        try
        {
            if (string.IsNullOrEmpty(ConnectionString))
            {
                Console.WriteLine("Connection string is empty");
                return;
            }

            var tables = await SchemaService.LoadTablesFromSqlServerAsync(ConnectionString);
            var relationships = await SchemaService.LoadRelationshipsFromSqlServerAsync(ConnectionString, tables);

            _queryModel.Tables.AddRange(tables);
            _queryModel.Relationships.AddRange(relationships);

            // Position tables on canvas
            PositionTables();

            await JSRuntime.InvokeVoidAsync("hideModal", "connectionModal");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Connection error: {ex.Message}");
        }
    }

    private void PositionTables()
    {
        int x = 50, y = 50;
        int maxHeight = 0;

        foreach (var table in _queryModel.Tables)
        {
            table.Position = new Position { X = x, Y = y };

            x += 300;
            maxHeight = Math.Max(maxHeight, (int)table.Size.Height);

            if (x > 1200)
            {
                x = 50;
                y += maxHeight + 50;
                maxHeight = 0;
            }
        }
    }

    public void AddNewTable()
    {
        var newTable = new TableModel
        {
            Name = "NewTable",
            Alias = "nt",
            Schema = "dbo",
            Position = new Position { X = 100, Y = 100 }
        };

        // Add default metadata columns
        newTable.Columns.Add(new ColumnModel { Name = "Id", DataType = "int", IsPrimaryKey = true });
        newTable.Columns.Add(new ColumnModel { Name = "CreatedBy", DataType = "nvarchar" });
        newTable.Columns.Add(new ColumnModel { Name = "CreatedAt", DataType = "datetime2" });
        newTable.Columns.Add(new ColumnModel { Name = "ModifiedBy", DataType = "nvarchar" });
        newTable.Columns.Add(new ColumnModel { Name = "ModifiedAt", DataType = "datetime2" });

        _queryModel.Tables.Add(newTable);
        UpdateSqlPreview();
    }

    public void RemoveTable(TableModel table)
    {
        _queryModel.Tables.Remove(table);
        _queryModel.Relationships.RemoveAll(r =>
            r.SourceTableId == table.Id || r.TargetTableId == table.Id);
        UpdateSqlPreview();
    }

    public void AddColumn(TableModel table)
    {
        table.Columns.Add(new ColumnModel
        {
            Name = "NewColumn",
            DataType = "nvarchar",
            MaxLength = 255
        });
        UpdateSqlPreview();
    }

    private void EditRelationship(RelationshipModel relationship)
    {
        // TODO: Open relationship editor
    }

    private void ToggleDomain(DomainModel domain)
    {
        domain.IsCollapsed = !domain.IsCollapsed;
    }

    public void AddValidationRule()
    {
        _validationRules.Add(new ValidationRule
        {
            Name = "New Rule",
            RuleType = "SQL",
            IsActive = true
        });
    }

    public void RemoveValidationRule(ValidationRule rule)
    {
        _validationRules.Remove(rule);
    }

    public void UpdateSqlPreview()
    {
        _generatedSql = SqlGenerator.GenerateQuery(_queryModel);
        StateHasChanged();
    }

    public async Task GenerateAndExecuteQuery()
    {
        UpdateSqlPreview();

        if (!string.IsNullOrEmpty(ConnectionString) && !string.IsNullOrEmpty(_generatedSql))
        {
            try
            {
                _queryResults = await SchemaService.ExecuteQueryAsync(ConnectionString, _generatedSql, 100);

                // notify parent
                if (OnQueryGenerated.HasDelegate)
                    await OnQueryGenerated.InvokeAsync(_generatedSql);

                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Query execution error: {ex.Message}");
            }
        }
    }

    public async Task SaveLayout()
    {
        var json = System.Text.Json.JsonSerializer.Serialize(_queryModel);
        await JSRuntime.InvokeVoidAsync("saveToLocalStorage", "sqlBuilderLayout", json);
    }

    public async Task LoadLayout()
    {
        var json = await JSRuntime.InvokeAsync<string>("loadFromLocalStorage", "sqlBuilderLayout");
        if (!string.IsNullOrEmpty(json))
        {
            _queryModel = System.Text.Json.JsonSerializer.Deserialize<QueryModel>(json) ?? new QueryModel();
            StateHasChanged();
        }
    }

    public async Task ZoomIn()
    {
        _zoomLevel = Math.Min(_zoomLevel * 1.2, 3.0);
        await JSRuntime.InvokeVoidAsync("setCanvasZoom", _zoomLevel);
    }

    public async Task ZoomOut()
    {
        _zoomLevel = Math.Max(_zoomLevel / 1.2, 0.3);
        await JSRuntime.InvokeVoidAsync("setCanvasZoom", _zoomLevel);
    }

    public async Task ResetZoom()
    {
        _zoomLevel = 1.0;
        await JSRuntime.InvokeVoidAsync("setCanvasZoom", _zoomLevel);
    }

    // Public properties for external access
    public QueryModel QueryModel => _queryModel;
    public string GeneratedSql => _generatedSql;
    public System.Data.DataTable? QueryResults => _queryResults;
    public List<ValidationRule> ValidationRules => _validationRules;
}