@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop

@inject IJSRuntime JSRuntime
@inject ISchemaService SchemaService
@inject ISqlGeneratorService SqlGenerator
@inject IAzureOpenAIService OpenAIService
@implements IAsyncDisposable

<div class="visual-sql-builder">
    <div class="toolbar">
        <div class="btn-group" role="group">
            <button class="btn btn-primary" type="button" @onclick="ShowConnectionDialog">
                <i class="bi bi-database"></i> Connect Database
            </button>

            <button class="btn btn-success" type="button" @onclick="ShowExcelUpload">
                <i class="bi bi-file-earmark-excel"></i> Upload Excel
            </button>

            <button class="btn btn-info" type="button" @onclick="AddNewTable">
                <i class="bi bi-table"></i> Add Table
            </button>
            <button class="btn btn-info" type="button" @onclick="ShowCreateDomainModal">
                <i class="bi bi-diagram-3"></i> Add Domain
            </button>
            <button class="btn btn-auto-arrange" type="button" @onclick="AutoArrangeDomainsAndTables" disabled="@isAutoArranging">
                @if (isAutoArranging)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                }
                else
                {
                    <i class="bi bi-grid-3x3-gap me-1"></i>
                }
                Auto-Arrange All
            </button>

            <button class="btn btn-warning" type="button" @onclick="SaveLayout">
                <i class="bi bi-save"></i> Save Layout
            </button>
            <button class="btn btn-secondary" type="button" @onclick="LoadLayout">
                <i class="bi bi-folder-open"></i> Load Layout
            </button>
        </div>

        <div class="btn-group ms-3" role="group">
            <button class="btn btn-outline-primary" type="button" @onclick="ZoomIn">
                <i class="bi bi-zoom-in"></i>
            </button>
            <button class="btn btn-outline-primary" type="button" @onclick="ZoomOut">
                <i class="bi bi-zoom-out"></i>
            </button>
            <button class="btn btn-outline-primary" type="button" @onclick="ResetZoom">
                <i class="bi bi-arrows-fullscreen"></i>
            </button>
        </div>

        <div class="btn-group ms-3" role="group">
            <button class="btn btn-success" type="button" @onclick="GenerateQuery">
                <i class="bi bi-code-square"></i> Generate Query
            </button>
            <button class="btn btn-success" type="button" @onclick="GenerateAndExecuteQuery">
                <i class="bi bi-play-fill"></i> Execute Query
            </button>
        </div>
    </div>

    <!-- Context Menus -->
    <ul id="rename-table-menu" class="context-menu">
        <li data-action="rename">Rename Table</li>
    </ul>

    <ul id="relationship-context-menu" class="context-menu">
        <li data-action="edit-join"><i class="bi bi-arrow-left-right"></i> Edit Join Type</li>
        <li data-action="delete-relationship"><i class="bi bi-trash"></i> Delete Relationship</li>
    </ul>

    <ul id="column-context-menu" class="context-menu">
        <li data-action="set-alias"><i class="bi bi-tag"></i> Set Column Alias</li>
        <li data-action="toggle-select"><i class="bi bi-check-square"></i> Toggle Selection</li>
    </ul>

    <div class="main-container">
        <div class="canvas-container" @ref="canvasElement" id="sql-canvas">

            <!-- SVG for relationship lines -->
            <svg class="relationship-layer">

                @foreach (var relationship in _queryModel.Relationships)
                {
                    var sourceTable = _queryModel.Tables.FirstOrDefault(t => t.Id == relationship.SourceTableId);
                    var targetTable = _queryModel.Tables.FirstOrDefault(t => t.Id == relationship.TargetTableId);

                    if (sourceTable != null && targetTable != null)
                    {
                        var sourceCol = sourceTable.Columns.FirstOrDefault(c => c.Id == relationship.SourceColumnId);
                        var targetCol = targetTable.Columns.FirstOrDefault(c => c.Id == relationship.TargetColumnId);

                        if (sourceCol != null && targetCol != null)
                        {
                            var sourceConnectorPos = GetConnectorPosition(sourceTable, sourceCol, "right");
                            var targetConnectorPos = GetConnectorPosition(targetTable, targetCol, "left");

                            var color = GetJoinTypeColor(relationship.JoinType);
                            var strokeWidth = relationship.JoinType == JoinType.InnerJoin ? "3" : "2";
                            var dashArray = GetJoinTypeDashArray(relationship.JoinType);

                            <line class="relationship-line @(relationship.JoinType.ToString().ToLower())"
                                  x1="@sourceConnectorPos.X"
                                  y1="@sourceConnectorPos.Y"
                                  x2="@targetConnectorPos.X"
                                  y2="@targetConnectorPos.Y"
                                  stroke="@color"
                                  stroke-width="@strokeWidth"
                                  stroke-dasharray="@dashArray"
                                  @onclick="@(() => EditRelationship(relationship))"
                                  data-relationship-id="@relationship.Id"
                                  data-source-table-id="@relationship.SourceTableId"
                                  data-target-table-id="@relationship.TargetTableId"
                                  data-source-column-id="@relationship.SourceColumnId"
                                  data-target-column-id="@relationship.TargetColumnId"
                                  style="cursor: pointer;" />

                            <!-- Join type label -->
                            <svg:text x="@((sourceConnectorPos.X + targetConnectorPos.X) / 2)"
                                      y="@((sourceConnectorPos.Y + targetConnectorPos.Y) / 2 - 10)"
                                      class="join-type-label"
                                      text-anchor="middle"
                                      style="font-size: 12px; fill: @color; font-weight: bold;">
                                @GetJoinTypeDisplayName(relationship.JoinType)
                            </svg:text>

                            <!-- Cardinality label -->
                            <svg:text x="@((sourceConnectorPos.X + targetConnectorPos.X) / 2)"
                                      y="@((sourceConnectorPos.Y + targetConnectorPos.Y) / 2 + 5)"
                                      class="cardinality-label"
                                      text-anchor="middle"
                                      style="font-size: 10px; fill: #666;">
                                @relationship.Cardinality
                            </svg:text>
                        }
                    }
                }
            </svg>

            <!-- Domains -->
            @foreach (var domain in _queryModel.Domains)
            {
                var tablesInDomain = _queryModel.Tables.Where(t => t.DomainId == domain.Id).ToList();
                var visibleTablesCount = tablesInDomain.Count(t => !domain.IsCollapsed);

                <div class="domain-container @(domain.IsCollapsed ? "collapsed" : "")"
                     data-domain-id="@domain.Id"
                     @onclick="() => SelectDomain(domain)"
                     @onclick:stopPropagation="true"
                     style="left: @(domain.Position.X)px; top: @(domain.Position.Y)px;
                                                                                                     width: @(domain.Size.Width)px; height: @(domain.Size.Height)px;
                                                                                                     background-color: @domain.Color;">
                    <div class="domain-header">
                        <span class="domain-name">@domain.Name</span>
                        <div class="domain-controls">
                            <span class="domain-table-count">
                                @if (domain.IsCollapsed)
                                {
                                    <text>@tablesInDomain.Count tables (hidden)</text>
                                }
                                else
                                {
                                    <text>@visibleTablesCount/@tablesInDomain.Count tables</text>
                                }
                            </span>
                            <button class="btn btn-sm btn-link domain-toggle-btn"
                                    @onclick="() => ToggleDomain(domain)"
                                    @onclick:stopPropagation="true"
                                    title="@(domain.IsCollapsed ? "Expand Domain" : "Collapse Domain")">
                                <i class="bi bi-@(domain.IsCollapsed ? "chevron-down" : "chevron-up")"></i>
                            </button>
                        </div>
                    </div>

                    @if (!domain.IsCollapsed)
                    {
                        <div class="domain-body">
                            <!-- Domain content when expanded -->
                            <div class="domain-info">
                                <small class="text-muted">Domain bounds:@domain.Size.Width × @domain.Size.Height </small>
                            </div>
                        </div>
                    }
                </div>
            }

            <!-- Tables -->
            @foreach (var table in _queryModel.Tables)
            {
                var domain = !string.IsNullOrEmpty(table.DomainId) ? _queryModel.Domains.FirstOrDefault(d => d.Id == table.DomainId) : null;
                var isInCollapsedDomain = domain?.IsCollapsed == true;
                var displayStyle = isInCollapsedDomain ? "display: none;" : "";
                var cssClasses = $"table-card {(isInCollapsedDomain ? "hidden-by-domain" : "")}";


                <div class="@($"{cssClasses} {(isInCollapsedDomain ? "hidden-by-domain" : "")}")"
                     data-table-id="@table.Id"
                     data-domain-id="@table.DomainId"
                     style="left: @(table.Position.X)px;
                                                                                                    top: @(table.Position.Y)px;
                                                                                                    width: @(table.Size.Width)px;
                                                                                                    height: @(table.Size.Height)px;
                                                                                                    @(displayStyle)"
                     @onclick="() => SelectTable(table)">


                    <div class="table-card-header">
                        <span class="table-card-header-text">@table.Name</span>
                        @if (!string.IsNullOrEmpty(table.Alias) && table.Alias != table.Name)
                        {
                            <span class="table-alias">(@table.Alias)</span>
                        }
                        <button class="btn btn-sm btn-link text-white" type="button" @onclick="() => RemoveTable(table)">
                            <i class="bi bi-x"></i>
                        </button>
                    </div>
                    <div class="table-body">
                        @foreach (var column in table.Columns)
                        {
                            <div class="column-row">
                                <span class="column-connector left"
                                      data-column-id="@column.Id"
                                      data-table-id="@table.Id"
                                      title="Drag to create relationship">
                                </span>
                                <input type="checkbox" @bind="column.IsSelected" @bind:after="() => UpdateSqlPreview()" />
                                <span class="column-name" title="Right-click for options">
                                    @if (column.IsPrimaryKey)
                                    {
                                        <i class="bi bi-key text-warning"></i>
                                    }
                                    @if (column.IsForeignKey)
                                    {
                                        <i class="bi bi-arrow-right text-info"></i>
                                    }
                                    @if (column.IsComputed)
                                    {
                                        <i class="bi bi-calculator text-success"></i>
                                    }
                                    @column.Name
                                    @if (!string.IsNullOrEmpty(column.QueryAlias) && column.QueryAlias != column.Name)
                                    {
                                        <span class="column-alias">(@column.QueryAlias)</span>
                                    }
                                </span>
                                <span class="column-type">@column.DataType</span>
                                @if (column.Filter != null)
                                {
                                    <i class="bi bi-funnel-fill text-info"></i>
                                }
                                <span class="column-connector right"
                                      data-column-id="@column.Id"
                                      data-table-id="@table.Id"
                                      title="Drag to create relationship"></span>
                            </div>
                        }
                        <button class="btn btn-sm btn-link" type="button" @onclick="() => ShowAddColumnModal(table)">
                            <i class="bi bi-plus"></i> Add Column
                        </button>
                    </div>
                </div>
            }
        </div>

        <div class="sidebar">
            <ul class="nav nav-tabs" role="tablist">
                <li class="nav-item">
                    <a class="nav-link active" data-bs-toggle="tab" href="#sql-preview">SQL</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" data-bs-toggle="tab" href="#relationships">Relationships</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" data-bs-toggle="tab" href="#properties">Properties</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" data-bs-toggle="tab" href="#validation">Validation</a>
                </li>
            </ul>

            <div class="tab-content">
                <div class="tab-pane fade show active" id="sql-preview">
                    <div class="sql-preview">
                        <pre><code>@_generatedSql</code></pre>
                    </div>
                </div>

                <div class="tab-pane fade" id="relationships">
                    <div class="relationships-panel">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h5>Relationships (@_queryModel.Relationships.Count)</h5>
                            <button class="btn btn-sm btn-outline-secondary" @onclick="RefreshRelationshipDiagram">
                                <i class="bi bi-arrow-clockwise"></i> Refresh
                            </button>
                        </div>

                        @if (_queryModel.Relationships.Any())
                        {
                            <div class="relationship-list">
                                @foreach (var relationship in _queryModel.Relationships)
                                {
                                    var sourceTable = _queryModel.Tables.FirstOrDefault(t => t.Id == relationship.SourceTableId);
                                    var targetTable = _queryModel.Tables.FirstOrDefault(t => t.Id == relationship.TargetTableId);
                                    var sourceColumn = sourceTable?.Columns.FirstOrDefault(c => c.Id == relationship.SourceColumnId);
                                    var targetColumn = targetTable?.Columns.FirstOrDefault(c => c.Id == relationship.TargetColumnId);

                                    if (sourceTable != null && targetTable != null && sourceColumn != null && targetColumn != null)
                                    {
                                        <div class="relationship-item">
                                            <div class="relationship-header">
                                                <span class="join-type-badge" style="background-color: @GetJoinTypeColor(relationship.JoinType)">
                                                    @GetJoinTypeDisplayName(relationship.JoinType)
                                                </span>
                                                <div class="relationship-actions">
                                                    <button class="btn btn-sm btn-outline-primary"
                                                            @onclick="() => EditRelationship(relationship)"
                                                            title="Edit Relationship">
                                                        <i class="bi bi-pencil"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger"
                                                            @onclick="() => DeleteRelationship(relationship.Id)"
                                                            title="Delete Relationship">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </div>
                                            </div>
                                            <div class="relationship-details">
                                                <div class="relationship-connection">
                                                    <div class="table-column">
                                                        <strong>@sourceTable.Name</strong>
                                                        <span class="column-name">@sourceColumn.Name</span>
                                                        @if (sourceColumn.IsPrimaryKey)
                                                        {
                                                            <i class="bi bi-key text-warning" title="Primary Key"></i>
                                                        }
                                                    </div>
                                                    <div class="relationship-arrow">
                                                        <i class="bi bi-arrow-right"></i>
                                                    </div>
                                                    <div class="table-column">
                                                        <strong>@targetTable.Name</strong>
                                                        <span class="column-name">@targetColumn.Name</span>
                                                        @if (targetColumn.IsPrimaryKey)
                                                        {
                                                            <i class="bi bi-key text-warning" title="Primary Key"></i>
                                                        }
                                                    </div>
                                                </div>
                                                <div class="relationship-meta">
                                                    <small class="text-muted">
                                                        Cardinality: @relationship.Cardinality
                                                        @if (!string.IsNullOrEmpty(relationship.Name))
                                                        {
                                                            <span> | Name: @relationship.Name</span>
                                                        }
                                                    </small>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        }
                        else
                        {
                            <div class="empty-state">
                                <div class="text-center text-muted">
                                    <i class="bi bi-arrow-left-right fs-1 mb-3"></i>
                                    <p>No relationships created yet</p>
                                    <p><small>Drag from column connectors to create relationships between tables</small></p>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <div class="tab-pane fade" id="properties">
                    @if (_selectedTable != null)
                    {
                        <div class="properties-panel">
                            <h5><i class="bi bi-table"></i> Table Properties</h5>
                            <div class="mb-3">
                                <label class="form-label">Name:</label>
                                <input type="text" class="form-control" @bind="_selectedTable.Name"
                                       @bind:after="() => UpdateSqlPreview()" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Alias:</label>
                                <input type="text" class="form-control" @bind="_selectedTable.Alias"
                                       @bind:after="() => UpdateSqlPreview()" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Schema:</label>
                                <input type="text" class="form-control" @bind="_selectedTable.Schema"
                                       @bind:after="() => UpdateSqlPreview()" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Domain Assignment:</label>
                                <select class="form-select" value="@(_selectedTable.DomainId ?? "")"
                                        @onchange="OnTableDomainChanged">
                                    <option value="">None</option>
                                    @foreach (var domain in _queryModel.Domains)
                                    {
                                        <option value="@domain.Id">@domain.Name</option>
                                    }
                                </select>
                                <div class="form-text">
                                    <i class="bi bi-info-circle"></i>
                                    Table will automatically move to domain and adjust domain bounds
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col">
                                    <label class="form-label">Position:</label>
                                    <div class="input-group">
                                        <span class="input-group-text">X</span>
                                        <input type="number" class="form-control"
                                               @bind="_selectedTable.Position.X" readonly />
                                        <span class="input-group-text">Y</span>
                                        <input type="number" class="form-control"
                                               @bind="_selectedTable.Position.Y" readonly />
                                    </div>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col">
                                    <label class="form-label">Size:</label>
                                    <div class="input-group">
                                        <span class="input-group-text">W</span>
                                        <input type="number" class="form-control"
                                               @bind="_selectedTable.Size.Width" readonly />
                                        <span class="input-group-text">H</span>
                                        <input type="number" class="form-control"
                                               @bind="_selectedTable.Size.Height" readonly />
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    else if (_selectedDomain != null)
                    {
                        <div class="properties-panel">
                            <h5><i class="bi bi-diagram-3"></i> Domain Properties</h5>
                            <div class="mb-3">
                                <label class="form-label">Name:</label>
                                <input type="text" class="form-control" @bind="_selectedDomain.Name"
                                       @bind:after="() => OnDomainNameChanged()" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Background Color:</label>
                                <div class="row">
                                    <div class="col-8">
                                        <input type="color" class="form-control form-control-color"
                                               @bind="_selectedDomain.Color" @bind:after="() => OnDomainColorChanged()"
                                               style="height: 38px;" />
                                    </div>
                                    <div class="col-4">
                                        <input type="text" class="form-control" @bind="_selectedDomain.Color"
                                               @bind:after="() => OnDomainColorChanged()" />
                                    </div>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col">
                                    <label class="form-label">Position:</label>
                                    <div class="input-group">
                                        <span class="input-group-text">X</span>
                                        <input type="number" class="form-control"
                                               @bind="_selectedDomain.Position.X" readonly />
                                        <span class="input-group-text">Y</span>
                                        <input type="number" class="form-control"
                                               @bind="_selectedDomain.Position.Y" readonly />
                                    </div>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col">
                                    <label class="form-label">Size:</label>
                                    <div class="input-group">
                                        <span class="input-group-text">W</span>
                                        <input type="number" class="form-control"
                                               @bind="_selectedDomain.Size.Width" readonly />
                                        <span class="input-group-text">H</span>
                                        <input type="number" class="form-control"
                                               @bind="_selectedDomain.Size.Height" readonly />
                                    </div>
                                </div>
                            </div>

                            @{
                                var tablesInDomain = _queryModel.Tables.Where(t => t.DomainId == _selectedDomain.Id).ToList();
                            }

                            <div class="domain-stats">
                                <h6>Domain Statistics</h6>
                                <div class="stat-item">
                                    <span>Tables:</span>
                                    <strong>@tablesInDomain.Count</strong>
                                </div>
                                @if (tablesInDomain.Any())
                                {
                                    <div class="stat-item">
                                        <span>Columns:</span>
                                        <strong>@tablesInDomain.Sum(t => t.Columns.Count)</strong>
                                    </div>
                                    <div class="stat-item">
                                        <span>Relationships:</span>
                                        <strong>
                                            @_queryModel.Relationships.Count(r =>
                                            tablesInDomain.Any(t => t.Id == r.SourceTableId) ||
                                            tablesInDomain.Any(t => t.Id == r.TargetTableId))
                                </strong>
                            </div>
                                                        }
                            </div>

                            @if (tablesInDomain.Any())
                            {
                                <div class="mt-3">
                                    <h6>Tables in Domain</h6>
                                    <div class="domain-tables-list">
                                        @foreach (var table in tablesInDomain)
                                        {
                                            <div class="domain-table-item">
                                                <span class="table-name">@table.Name</span>
                                                <button class="btn btn-sm btn-outline-secondary"
                                                        @onclick="() => SelectTable(table)"
                                                        title="Select Table">
                                                    <i class="bi bi-cursor"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-warning"
                                                        @onclick="() => UnassignTableFromDomain(table.Id)"
                                                        title="Remove from Domain">
                                                    <i class="bi bi-x"></i>
                                                </button>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }

                            <div class="mt-3">
                                <button class="btn btn-danger btn-sm"
                                        @onclick="() => ShowDeleteDomainConfirmation(_selectedDomain.Id)">
                                    <i class="bi bi-trash"></i> Delete Domain
                                </button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="empty-state">
                            <div class="text-center text-muted">
                                <i class="bi bi-cursor fs-1 mb-3"></i>
                                <p>Select a table or domain to view properties</p>
                                <p><small>Click on any table or domain to see its properties here</small></p>
                            </div>
                        </div>
                    }

                    <!-- Domain Management Section -->
                    <hr />
                    <div class="domains-section">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h5><i class="bi bi-diagram-3"></i> Domains (@_queryModel.Domains.Count)</h5>
                            <button class="btn btn-sm btn-primary" @onclick="ShowCreateDomainModal">
                                <i class="bi bi-plus"></i> Add
                            </button>
                        </div>

                        @if (_queryModel.Domains.Any())
                        {
                            <div class="domain-list">
                                @foreach (var domain in _queryModel.Domains)
                                {
                                    var tablesInDomain = _queryModel.Tables.Count(t => t.DomainId == domain.Id);
                                    <div class="domain-item @(_selectedDomain?.Id == domain.Id ? "selected" : "")">
                                        <div class="domain-header-info">
                                            <div class="domain-color-indicator" style="background-color: @domain.Color"></div>
                                            <div class="domain-details">
                                                <strong>@domain.Name</strong>
                                                <small class="text-muted d-block">@tablesInDomain table(s)</small>
                                            </div>
                                        </div>
                                        <div class="domain-actions">
                                            <button class="btn btn-sm btn-outline-primary"
                                                    @onclick="() => SelectDomain(domain)"
                                                    title="Select Domain">
                                                <i class="bi bi-cursor"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger"
                                                    @onclick="() => ShowDeleteDomainConfirmation(domain.Id)"
                                                    title="Delete Domain">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="empty-state">
                                <div class="text-center text-muted">
                                    <i class="bi bi-diagram-3 fs-3 mb-2"></i>
                                    <p><small>No domains created yet</small></p>
                                </div>
                            </div>
                        }

                    </div>
                </div>

                <div class="tab-pane fade" id="validation">
                    <div class="validation-panel">
                        <h5>Validation Rules</h5>
                        <button class="btn btn-sm btn-primary" type="button" @onclick="AddValidationRule">
                            <i class="bi bi-plus"></i> Add Rule
                        </button>
                        @foreach (var rule in _validationRules)
                        {
                            <div class="validation-rule">
                                <input type="text" @bind="rule.Name" placeholder="Rule name" />
                                <select @bind="rule.RuleType">
                                    <option value="SQL">SQL</option>
                                    <option value="CSharp">C#</option>
                                </select>
                                <textarea @bind="rule.Expression" placeholder="Expression"></textarea>
                                <button class="btn btn-sm btn-danger" type="button" @onclick="() => RemoveValidationRule(rule)">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </div>
                        }
                    </div>
                </div>

            </div>
        </div>
    </div>

</div>

<!-- Add Column Modal -->
@if (showAddColumnModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-plus-circle"></i>
                        Add Column to @selectedTableForColumn?.Name
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseAddColumnModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Column Name:</label>
                                <input type="text" class="form-control" @bind="newColumnName"
                                       placeholder="Enter column name" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label">Data Type:</label>
                                <select class="form-select" @bind="newColumnDataType">
                                    <option value="int">int</option>
                                    <option value="bigint">bigint</option>
                                    <option value="varchar">varchar</option>
                                    <option value="nvarchar">nvarchar</option>
                                    <option value="char">char</option>
                                    <option value="nchar">nchar</option>
                                    <option value="text">text</option>
                                    <option value="ntext">ntext</option>
                                    <option value="decimal">decimal</option>
                                    <option value="float">float</option>
                                    <option value="real">real</option>
                                    <option value="money">money</option>
                                    <option value="datetime">datetime</option>
                                    <option value="datetime2">datetime2</option>
                                    <option value="date">date</option>
                                    <option value="time">time</option>
                                    <option value="bit">bit</option>
                                    <option value="uniqueidentifier">uniqueidentifier</option>
                                    <option value="computed">computed</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    @if (newColumnDataType != "computed")
                    {
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Max Length:</label>
                                    <input type="number" class="form-control" @bind="newColumnMaxLength"
                                           placeholder="Optional" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-check mt-4">
                                    <input class="form-check-input" type="checkbox" @bind="newColumnIsNullable" />
                                    <label class="form-check-label">Allow Null</label>
                                </div>
                            </div>
                        </div>
                    }

                    @if (newColumnDataType == "computed")
                    {
                        <div class="mb-3">
                            <label class="form-label">SQL Expression:</label>
                            <div class="form-text mb-2">
                                Available columns: @string.Join(", ", selectedTableForColumn?.Columns?.Where(c => !c.IsComputed).Select(c => c.Name) ?? new List<string>())
                            </div>
                            <textarea class="form-control" rows="3" @bind="newColumnExpression"
                                      placeholder="Example: [FirstName] + ' ' + [LastName]"
                                      style="font-family: 'Courier New', monospace;"></textarea>
                        </div>
                    }

                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" @bind="newColumnIsPrimaryKey" />
                                <label class="form-check-label">Primary Key</label>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" @bind="newColumnIsForeignKey" />
                                <label class="form-check-label">Foreign Key</label>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseAddColumnModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="ConfirmAddColumn"
                            disabled="@(string.IsNullOrWhiteSpace(newColumnName) || (newColumnDataType == "computed" && string.IsNullOrWhiteSpace(newColumnExpression)))">
                        Add Column
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Column Alias Modal -->
@if (showColumnAliasModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Set Column Alias</h5>
                    <button type="button" class="btn-close" @onclick="CloseColumnAliasModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Column: <strong>@selectedColumnForAlias?.Name</strong></label>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Query Alias:</label>
                        <input type="text" class="form-control" @bind="newColumnAlias"
                               placeholder="Enter alias (leave empty to remove)" />
                        <div class="form-text">This alias will be used in the generated SQL query</div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseColumnAliasModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="ConfirmColumnAlias">
                        Set Alias
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Rename Table Modal -->
@if (showRenameModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Rename Table</h5>
                    <button type="button" class="btn-close" @onclick="CloseRenameModal"></button>
                </div>
                <div class="modal-body">
                    <p>Enter a new name for the table:</p>
                    <input type="text" class="form-control" @bind="newTableName" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseRenameModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="HandleRenameSubmit">Rename</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Join Type Selection Modal -->
@if (showJoinTypeModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-arrow-left-right"></i>
                        @(editingRelationshipId != null ? "Edit Relationship" : "Create Relationship")
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseJoinTypeModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6>Source Table</h6>
                            <div class="table-info">
                                <strong>@pendingRelationship?.SourceTableName</strong>
                                <br />
                                Column: @pendingRelationship?.SourceColumnName
                            </div>
                        </div>
                        <div class="col-md-6">
                            <h6>Target Table</h6>
                            <div class="table-info">
                                <strong>@pendingRelationship?.TargetTableName</strong>
                                <br />
                                Column: @pendingRelationship?.TargetColumnName
                            </div>
                        </div>
                    </div>

                    <hr />

                    <div class="mb-3">
                        <label class="form-label">Join Type:</label>
                        <div class="join-type-selection">
                            @foreach (var joinType in Enum.GetValues<JoinType>())
                            {
                                <div class="form-check join-type-option">
                                    <input class="form-check-input" type="radio"
                                           name="joinType"
                                           id="join_@joinType"
                                           value="@joinType"
                                           @onchange="@(e => OnJoinTypeChanged(e))"
                                           checked="@(selectedJoinType == joinType)" />
                                    <label class="form-check-label" for="join_@joinType">
                                        <strong style="color: @GetJoinTypeColor(joinType);">@GetJoinTypeDisplayName(joinType)</strong>
                                        <br />
                                        <small class="text-muted">@GetJoinTypeDescription(joinType)</small>
                                    </label>
                                </div>
                            }
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Cardinality:</label>
                        <select class="form-select" @bind="selectedCardinality">
                            <option value="1:1">One-to-One (1:1)</option>
                            <option value="1:N">One-to-Many (1:N)</option>
                            <option value="N:1">Many-to-One (N:1)</option>
                            <option value="N:N">Many-to-Many (N:N)</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Relationship Name (Optional):</label>
                        <input type="text" class="form-control" @bind="relationshipName"
                               placeholder="e.g., CustomerOrders, UserRoles" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseJoinTypeModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="ConfirmRelationship">
                        @(editingRelationshipId != null ? "Update Relationship" : "Create Relationship")
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Query Results -->
<!-- Enhanced Query Results Section -->
@if (_queryResults != null)
{
    <div class="query-results">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h5>
                <i class="bi bi-table"></i>
                Query Results
                <span class="badge bg-primary">@_queryResults.Rows.Count rows</span>
            </h5>

            @{
                var hasExcelTables = _queryModel.Tables.Any(t => t.IsFromExcel && t.Columns.Any(c => c.IsSelected));
                var hasSqlTables = _queryModel.Tables.Any(t => !t.IsFromExcel && t.Columns.Any(c => c.IsSelected));
            }

            <div class="result-badges">
                @if (hasExcelTables && !hasSqlTables)
                {
                    <span class="badge bg-success">
                        <i class="bi bi-file-earmark-excel"></i> Excel Structure
                    </span>
                }
                else if (!hasExcelTables && hasSqlTables)
                {
                    <span class="badge bg-info">
                        <i class="bi bi-database"></i> Live Data
                    </span>
                }
                else if (hasExcelTables && hasSqlTables)
                {
                    <span class="badge bg-warning">
                        <i class="bi bi-arrow-left-right"></i> Mixed Sources
                    </span>
                }
            </div>
        </div>

        @if (hasExcelTables && !hasSqlTables)
        {
            <div class="alert alert-info mb-3">
                <i class="bi bi-info-circle"></i>
                <strong>Excel Data Preview:</strong>
                This shows sample data based on your Excel sheet structure.
                To execute with real Excel data, consider importing the sheets to a database.
            </div>
        }
        else if (hasExcelTables && hasSqlTables)
        {
            <div class="alert alert-warning mb-3">
                <i class="bi bi-exclamation-triangle"></i>
                <strong>Mixed Data Sources:</strong>
                This query combines Excel and database tables. To execute, Excel data needs to be imported to the database first.
            </div>
        }

        <div class="table-responsive" style="max-height: 400px; overflow-y: auto;">
            <table class="table table-striped table-hover">
                <thead class="table-dark sticky-top">
                    <tr>
                        @foreach (System.Data.DataColumn column in _queryResults.Columns)
                        {
                            <th>
                                @column.ColumnName
                                <small class="text-muted d-block">@GetColumnTypeDisplay(column.DataType)</small>
                            </th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @if (_queryResults.Rows.Count == 0)
                    {
                        <tr>
                            <td colspan="@_queryResults.Columns.Count" class="text-center text-muted py-4">
                                <i class="bi bi-inbox fs-1"></i>
                                <p>No data returned from query</p>
                            </td>
                        </tr>
                    }
                    else
                    {
                        @foreach (System.Data.DataRow row in _queryResults.Rows)
                        {
                            <tr>
                                @foreach (var item in row.ItemArray)
                                {
                                    <td>
                                        @if (item != null && item != DBNull.Value)
                                        {
                                            @FormatCellValue(item)
                                        }
                                        else
                                        {
                                            <span class="text-muted font-italic">NULL</span>
                                        }
                                    </td>
                                }
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>

        <!-- Query Metadata -->
        <div class="row mt-3">
            <div class="col-md-6">
                <small class="text-muted">
                    <strong>Query Type:</strong>
                    @if (hasExcelTables && !hasSqlTables)
                    {
                        <span>Excel Structure Analysis</span>
                    }
                    else if (!hasExcelTables && hasSqlTables)
                    {
                        <span>Database Query Execution</span>
                    }
                    else
                    {
                        <span>Mixed Source Query</span>
                    }
                </small>
            </div>
            <div class="col-md-6 text-end">
                <small class="text-muted">
                    Generated at: @DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")
                </small>
            </div>
        </div>

        <!-- Export Options -->
        <div class="mt-3">
            <div class="btn-group" role="group">
                <button type="button" class="btn btn-outline-primary btn-sm" @onclick="ExportResultsToCsv">
                    <i class="bi bi-download"></i> Export CSV
                </button>
                <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="CopyResultsToClipboard">
                    <i class="bi bi-clipboard"></i> Copy to Clipboard
                </button>
                <button type="button" class="btn btn-outline-info btn-sm" @onclick="ShowResultsInNewWindow">
                    <i class="bi bi-window"></i> Open in New Window
                </button>
            </div>
        </div>
    </div>
}
else if (!string.IsNullOrEmpty(_generatedSql))
{
    <div class="query-results">
        <div class="alert alert-secondary">
            <i class="bi bi-play-circle"></i>
            <strong>Ready to Execute:</strong>
            Click "Execute Query" to run your generated SQL and see results.
        </div>
    </div>
}

<!-- Connection Modal -->
@if (_showConnectionModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Database Connection</h5>
                    <button type="button" class="btn-close" @onclick="CloseConnectionDialog"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Connection String:</label>
                        <textarea class="form-control" @bind="ConnectionString" rows="3"
                                  placeholder="Server=localhost;Database=YourDB;User Id=sa;Password=YourPassword;TrustServerCertificate=True"></textarea>
                    </div>
                    @if (!string.IsNullOrEmpty(_connectionError))
                    {
                        <div class="alert alert-danger">
                            @_connectionError
                        </div>
                    }
                    @if (_isConnecting)
                    {
                        <div class="alert alert-info">
                            <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                            Connecting to database...
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseConnectionDialog">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="ConnectToDatabase" disabled="@_isConnecting">
                        Connect
                    </button>
                </div>
            </div>
        </div>
    </div>
}


@if (_showExcelModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-file-earmark-excel"></i>
                        Import Excel Workbook
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseExcelDialog"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Select Excel File:</label>
                        <InputFile OnChange="@HandleExcelFileSelected"
                                   accept=".xlsx,.xls"
                                   class="form-control"
                                   multiple="false" />
                        <div class="form-text">
                            <i class="bi bi-info-circle"></i>
                            Supported formats: .xlsx, .xls (Max size: 10MB)
                        </div>
                    </div>

                    @if (_excelProcessing)
                    {
                        <div class="alert alert-info">
                            <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                            Processing Excel file... Found @_processedSheets sheets
                        </div>

                        @if (_processingProgress > 0)
                        {
                            <div class="progress mb-3" style="height: 8px;">
                                <div class="progress-bar bg-success"
                                     role="progressbar"
                                     style="width: @(_processingProgress)%">
                                </div>
                            </div>
                        }
                    }

                    @if (_excelTables.Any())
                    {
                        <div class="mb-4">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h6>
                                    <i class="bi bi-table"></i>
                                    Detected Sheets (@_excelTables.Count):
                                </h6>
                                <div class="btn-group btn-group-sm" role="group">
                                    <button type="button" class="btn btn-outline-primary" @onclick="SelectAllExcelTables">
                                        <i class="bi bi-check-all"></i> Select All
                                    </button>
                                    <button type="button" class="btn btn-outline-secondary" @onclick="SelectNoExcelTables">
                                        <i class="bi bi-x-square"></i> Select None
                                    </button>
                                </div>
                            </div>

                            <div class="table-responsive" style="max-height: 400px; overflow-y: auto;">
                                <table class="table table-sm table-hover">
                                    <thead class="table-light sticky-top">
                                        <tr>
                                            <th style="width: 50px;">Select</th>
                                            <th>Sheet Name</th>
                                            <th>Columns</th>
                                            <th>Rows</th>
                                            <th>Data Types</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @for (int i = 0; i < _excelTables.Count; i++)
                                        {
                                            var table = _excelTables[i];
                                            var tableIndex = i;

                                            <tr class="@(GetExcelTableSelected(tableIndex) ? "table-success" : "")">
                                                <td>
                                                    <input type="checkbox"
                                                           class="form-check-input"
                                                           checked="@GetExcelTableSelected(tableIndex)"
                                                           @onchange="@((e) => SetExcelTableSelected(tableIndex, (bool)e.Value))" />
                                                </td>
                                                <td>
                                                    <div class="d-flex align-items-center">
                                                        <i class="bi bi-file-earmark-spreadsheet text-success me-2"></i>
                                                        <div>
                                                            <strong>@table.Name</strong>
                                                            @if (!string.IsNullOrEmpty(table.Description))
                                                            {
                                                                <br>

                                                                <small class="text-muted">@table.Description</small>
                                                            }
                                                        </div>
                                                    </div>
                                                </td>
                                                <td>
                                                    <span class="badge bg-primary">@table.Columns.Count</span>
                                                    @if (table.Columns.Any(c => c.IsPrimaryKey))
                                                    {
                                                        <i class="bi bi-key-fill text-warning" title="Has Primary Key"></i>
                                                    }
                                                </td>
                                                <td>
                                                    <span class="badge bg-info">@(table.RowCount ?? 0)</span>
                                                </td>
                                                <td>
                                                    <div class="data-types-preview">
                                                        @{
                                                            var dataTypes = table.Columns.GroupBy(c => c.DataType).Select(g => new { Type = g.Key, Count = g.Count() }).Take(3).ToList();
                                                        }
                                                        @foreach (var dt in dataTypes)
                                                        {
                                                            <span class="badge bg-light text-dark me-1" style="font-size: 10px;">
                                                                @dt.Type (@dt.Count)
                                                            </span>
                                                        }
                                                        @if (table.Columns.GroupBy(c => c.DataType).Count() > 3)
                                                        {
                                                            <span class="badge bg-secondary" style="font-size: 10px;">+@(table.Columns.GroupBy(c => c.DataType).Count() - 3)</span>
                                                        }
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>

                            @if (OpenAIService != null && _excelTables.Count > 1)
                            {
                                <div class="mt-3">
                                    <div class="card">
                                        <div class="card-body">
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" @bind="_useExcelAI" id="useExcelAI">
                                                <label class="form-check-label" for="useExcelAI">
                                                    <i class="bi bi-robot"></i>
                                                    <strong>Use AI to suggest relationships between sheets</strong>
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(_excelErrorMessage))
                    {
                        <div class="alert alert-danger">
                            <i class="bi bi-exclamation-triangle"></i>
                            @_excelErrorMessage
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseExcelDialog">Cancel</button>
                    <button type="button"
                            class="btn btn-primary"
                            @onclick="ImportExcelTables"
                            disabled="@(!HasSelectedExcelTables() || _excelProcessing)">
                        <i class="bi bi-upload"></i>
                        Import @(GetSelectedExcelTableCount()) Selected Sheet@((GetSelectedExcelTableCount() != 1) ? "s" : "")
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Create Domain Modal -->
@if (showCreateDomainModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-diagram-3"></i> Create Domain
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseCreateDomainModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Domain Name:</label>
                        <input type="text" class="form-control" @bind="newDomainName"
                               placeholder="e.g., User Management, Orders, Inventory" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Background Color:</label>
                        <div class="row">
                            <div class="col-8">
                                <input type="color" class="form-control form-control-color"
                                       @bind="newDomainColor" style="height: 38px;" />
                            </div>
                            <div class="col-4">
                                <input type="text" class="form-control" @bind="newDomainColor"
                                       placeholder="#e3f2fd" />
                            </div>
                        </div>
                    </div>
                    <div class="domain-preview">
                        <label class="form-label">Preview:</label>
                        <div class="domain-preview-box" style="background-color: @newDomainColor;">
                            <div class="domain-preview-header">
                                @(string.IsNullOrWhiteSpace(newDomainName) ? "Domain Name" : newDomainName)
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseCreateDomainModal">
                        Cancel
                    </button>
                    <button type="button" class="btn btn-primary" @onclick="ConfirmCreateDomain"
                            disabled="@string.IsNullOrWhiteSpace(newDomainName)">
                        Create Domain
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Delete Domain Confirmation Modal -->
@if (_showDeleteDomainConfirmation)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title text-danger">
                        <i class="bi bi-exclamation-triangle"></i> Delete Domain
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseDeleteDomainConfirmation"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-warning">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        @_deleteDomainWarning
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteDomainConfirmation">
                        Cancel
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteDomain">
                        <i class="bi bi-trash"></i> Delete Domain
                    </button>
                </div>
            </div>
        </div>
    </div>
}
